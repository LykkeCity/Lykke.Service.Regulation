// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.Regulation.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RegulationAPI.
    /// </summary>
    public static partial class RegulationAPIExtensions
    {
            /// <summary>
            /// Returns a client margin regulation by specified client id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            public static object ClientMarginRegulationGetByClientId(this IRegulationAPI operations, string clientId)
            {
                return operations.ClientMarginRegulationGetByClientIdAsync(clientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a client margin regulation by specified client id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ClientMarginRegulationGetByClientIdAsync(this IRegulationAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientMarginRegulationGetByClientIdWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a client margin regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            public static void ClientMarginRegulationDelete(this IRegulationAPI operations, string clientId)
            {
                operations.ClientMarginRegulationDeleteAsync(clientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a client margin regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ClientMarginRegulationDeleteAsync(this IRegulationAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ClientMarginRegulationDeleteWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes existing client margin regulation and adds new one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static ErrorResponse ClientMarginRegulationSet(this IRegulationAPI operations, string clientId, string regulationId)
            {
                return operations.ClientMarginRegulationSetAsync(clientId, regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes existing client margin regulation and adds new one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientMarginRegulationSetAsync(this IRegulationAPI operations, string clientId, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientMarginRegulationSetWithHttpMessagesAsync(clientId, regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds the client margin regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static ErrorResponse ClientMarginRegulationAdd(this IRegulationAPI operations, string clientId, string regulationId)
            {
                return operations.ClientMarginRegulationAddAsync(clientId, regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds the client margin regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientMarginRegulationAddAsync(this IRegulationAPI operations, string clientId, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientMarginRegulationAddWithHttpMessagesAsync(clientId, regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a client regulation by specified client id and regulation id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static object ClientRegulationGet(this IRegulationAPI operations, string clientId, string regulationId)
            {
                return operations.ClientRegulationGetAsync(clientId, regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a client regulation by specified client id and regulation id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ClientRegulationGetAsync(this IRegulationAPI operations, string clientId, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationGetWithHttpMessagesAsync(clientId, regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the regulation associated with client by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The id of regulation to delete.
            /// </param>
            public static ErrorResponse ClientRegulationDelete(this IRegulationAPI operations, string clientId, string regulationId)
            {
                return operations.ClientRegulationDeleteAsync(clientId, regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the regulation associated with client by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The id of regulation to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientRegulationDeleteAsync(this IRegulationAPI operations, string clientId, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationDeleteWithHttpMessagesAsync(clientId, regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a regulations associated with client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            public static IList<ClientRegulationModel> ClientRegulationGetByClientId(this IRegulationAPI operations, string clientId)
            {
                return operations.ClientRegulationGetByClientIdAsync(clientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a regulations associated with client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ClientRegulationModel>> ClientRegulationGetByClientIdAsync(this IRegulationAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationGetByClientIdWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a client regulations associated with regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static object ClientRegulationGetByRegulationId(this IRegulationAPI operations, string regulationId)
            {
                return operations.ClientRegulationGetByRegulationIdAsync(regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a client regulations associated with regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ClientRegulationGetByRegulationIdAsync(this IRegulationAPI operations, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationGetByRegulationIdWithHttpMessagesAsync(regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an active regulations associated with client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            public static IList<ClientRegulationModel> ClientRegulationGetActiveByClientId(this IRegulationAPI operations, string clientId)
            {
                return operations.ClientRegulationGetActiveByClientIdAsync(clientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an active regulations associated with client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ClientRegulationModel>> ClientRegulationGetActiveByClientIdAsync(this IRegulationAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationGetActiveByClientIdWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an active and KYC regulations associated with client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            public static IList<ClientRegulationModel> ClientRegulationGetAvailableByClientId(this IRegulationAPI operations, string clientId)
            {
                return operations.ClientRegulationGetAvailableByClientIdAsync(clientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an active and KYC regulations associated with client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ClientRegulationModel>> ClientRegulationGetAvailableByClientIdAsync(this IRegulationAPI operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationGetAvailableByClientIdWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds the client regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a client regulation.
            /// </param>
            public static ErrorResponse ClientRegulationAdd(this IRegulationAPI operations, NewClientRegulationModel model = default(NewClientRegulationModel))
            {
                return operations.ClientRegulationAddAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds the client regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a client regulation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientRegulationAddAsync(this IRegulationAPI operations, NewClientRegulationModel model = default(NewClientRegulationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationAddWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes existing client regulations and adds new one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static ErrorResponse ClientRegulationSet(this IRegulationAPI operations, string clientId, string regulationId)
            {
                return operations.ClientRegulationSetAsync(clientId, regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes existing client regulations and adds new one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientRegulationSetAsync(this IRegulationAPI operations, string clientId, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationSetWithHttpMessagesAsync(clientId, regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initializes client regulations using rules associated with country.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='country'>
            /// The country name.
            /// </param>
            public static ErrorResponse ClientRegulationSetDefault(this IRegulationAPI operations, string clientId, string country)
            {
                return operations.ClientRegulationSetDefaultAsync(clientId, country).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initializes client regulations using rules associated with country.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='country'>
            /// The country name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientRegulationSetDefaultAsync(this IRegulationAPI operations, string clientId, string country, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationSetDefaultWithHttpMessagesAsync(clientId, country, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the client regulation KYC status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='active'>
            /// The client regulation KYC status.
            /// </param>
            public static ErrorResponse ClientRegulationUpdateKyc(this IRegulationAPI operations, string clientId, string regulationId, bool active)
            {
                return operations.ClientRegulationUpdateKycAsync(clientId, regulationId, active).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the client regulation KYC status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='active'>
            /// The client regulation KYC status.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientRegulationUpdateKycAsync(this IRegulationAPI operations, string clientId, string regulationId, bool active, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationUpdateKycWithHttpMessagesAsync(clientId, regulationId, active, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the client regulation active status to {true}.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static ErrorResponse ClientRegulationActivate(this IRegulationAPI operations, string clientId, string regulationId)
            {
                return operations.ClientRegulationActivateAsync(clientId, regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the client regulation active status to {true}.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientRegulationActivateAsync(this IRegulationAPI operations, string clientId, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationActivateWithHttpMessagesAsync(clientId, regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the client regulation active status to {false}.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static ErrorResponse ClientRegulationDeactivate(this IRegulationAPI operations, string clientId, string regulationId)
            {
                return operations.ClientRegulationDeactivateAsync(clientId, regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the client regulation active status to {false}.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// The client id.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ClientRegulationDeactivateAsync(this IRegulationAPI operations, string clientId, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClientRegulationDeactivateWithHttpMessagesAsync(clientId, regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IRegulationAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IRegulationAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns margin regulation rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object MarginRegulationRuleGetById(this IRegulationAPI operations, string id)
            {
                return operations.MarginRegulationRuleGetByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns margin regulation rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MarginRegulationRuleGetByIdAsync(this IRegulationAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MarginRegulationRuleGetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the margin regulation rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The margin regulation rule id.
            /// </param>
            public static ErrorResponse MarginRegulationRuleDelete(this IRegulationAPI operations, string id)
            {
                return operations.MarginRegulationRuleDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the margin regulation rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The margin regulation rule id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> MarginRegulationRuleDeleteAsync(this IRegulationAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MarginRegulationRuleDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all margin regulation rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MarginRegulationRuleModel> MarginRegulationRuleGetAll(this IRegulationAPI operations)
            {
                return operations.MarginRegulationRuleGetAllAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all margin regulation rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MarginRegulationRuleModel>> MarginRegulationRuleGetAllAsync(this IRegulationAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MarginRegulationRuleGetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a margin regulation rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model what describes a margin regulation rule.
            /// </param>
            public static ErrorResponse MarginRegulationRuleUpdate(this IRegulationAPI operations, MarginRegulationRuleModel model = default(MarginRegulationRuleModel))
            {
                return operations.MarginRegulationRuleUpdateAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a margin regulation rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model what describes a margin regulation rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> MarginRegulationRuleUpdateAsync(this IRegulationAPI operations, MarginRegulationRuleModel model = default(MarginRegulationRuleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MarginRegulationRuleUpdateWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a margin regulation rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model what describe a margin regulation rule.
            /// </param>
            public static ErrorResponse MarginRegulationRuleAdd(this IRegulationAPI operations, NewMarginRegulationRuleModel model = default(NewMarginRegulationRuleModel))
            {
                return operations.MarginRegulationRuleAddAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a margin regulation rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model what describe a margin regulation rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> MarginRegulationRuleAddAsync(this IRegulationAPI operations, NewMarginRegulationRuleModel model = default(NewMarginRegulationRuleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MarginRegulationRuleAddWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a regulation details by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static object RegulationGet(this IRegulationAPI operations, string regulationId)
            {
                return operations.RegulationGetAsync(regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a regulation details by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RegulationGetAsync(this IRegulationAPI operations, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegulationGetWithHttpMessagesAsync(regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the regulation by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// The id of regulation to delete.
            /// </param>
            public static ErrorResponse RegulationDelete(this IRegulationAPI operations, string regulationId)
            {
                return operations.RegulationDeleteAsync(regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the regulation by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// The id of regulation to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> RegulationDeleteAsync(this IRegulationAPI operations, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegulationDeleteWithHttpMessagesAsync(regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a regulation details by country code using welcome regulation
            /// rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='country'>
            /// The country code.
            /// </param>
            public static RegulationModel GetRegulationByCountry(this IRegulationAPI operations, string country)
            {
                return operations.GetRegulationByCountryAsync(country).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a regulation details by country code using welcome regulation
            /// rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='country'>
            /// The country code.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegulationModel> GetRegulationByCountryAsync(this IRegulationAPI operations, string country, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRegulationByCountryWithHttpMessagesAsync(country, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all regulations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<RegulationModel> RegulationGetAll(this IRegulationAPI operations)
            {
                return operations.RegulationGetAllAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all regulations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RegulationModel>> RegulationGetAllAsync(this IRegulationAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegulationGetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a regulation.
            /// </param>
            public static ErrorResponse UpdateRegulation(this IRegulationAPI operations, NewRegulationModel model = default(NewRegulationModel))
            {
                return operations.UpdateRegulationAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a regulation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> UpdateRegulationAsync(this IRegulationAPI operations, NewRegulationModel model = default(NewRegulationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRegulationWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds the regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a regulation.
            /// </param>
            public static ErrorResponse RegulationAdd(this IRegulationAPI operations, NewRegulationModel model = default(NewRegulationModel))
            {
                return operations.RegulationAddAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds the regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a regulation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> RegulationAddAsync(this IRegulationAPI operations, NewRegulationModel model = default(NewRegulationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegulationAddWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns welcome regulation rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='welcomeRegulationRuleId'>
            /// </param>
            public static object WelcomeRegulationRuleGetById(this IRegulationAPI operations, string welcomeRegulationRuleId)
            {
                return operations.WelcomeRegulationRuleGetByIdAsync(welcomeRegulationRuleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns welcome regulation rule by specified id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='welcomeRegulationRuleId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> WelcomeRegulationRuleGetByIdAsync(this IRegulationAPI operations, string welcomeRegulationRuleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WelcomeRegulationRuleGetByIdWithHttpMessagesAsync(welcomeRegulationRuleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all welcome regulation rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<WelcomeRegulationRuleModel> WelcomeRegulationRuleGetAll(this IRegulationAPI operations)
            {
                return operations.WelcomeRegulationRuleGetAllAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all welcome regulation rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WelcomeRegulationRuleModel>> WelcomeRegulationRuleGetAllAsync(this IRegulationAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WelcomeRegulationRuleGetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds the welcome regulation rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a welcome regulation rule.
            /// </param>
            public static ErrorResponse WelcomeRegulationRuleAdd(this IRegulationAPI operations, NewWelcomeRegulationRuleModel model = default(NewWelcomeRegulationRuleModel))
            {
                return operations.WelcomeRegulationRuleAddAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds the welcome regulation rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a welcome regulation rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> WelcomeRegulationRuleAddAsync(this IRegulationAPI operations, NewWelcomeRegulationRuleModel model = default(NewWelcomeRegulationRuleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WelcomeRegulationRuleAddWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all welcome regulation rules associated with specified country.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='country'>
            /// The country name.
            /// </param>
            public static IList<WelcomeRegulationRuleModel> WelcomeRegulationRuleGetByCountry(this IRegulationAPI operations, string country)
            {
                return operations.WelcomeRegulationRuleGetByCountryAsync(country).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all welcome regulation rules associated with specified country.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='country'>
            /// The country name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WelcomeRegulationRuleModel>> WelcomeRegulationRuleGetByCountryAsync(this IRegulationAPI operations, string country, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WelcomeRegulationRuleGetByCountryWithHttpMessagesAsync(country, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all welcome regulation rules associated with specified regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            public static object WelcomeRegulationRuleGetByRegulationId(this IRegulationAPI operations, string regulationId)
            {
                return operations.WelcomeRegulationRuleGetByRegulationIdAsync(regulationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all welcome regulation rules associated with specified regulation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// The regulation id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> WelcomeRegulationRuleGetByRegulationIdAsync(this IRegulationAPI operations, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WelcomeRegulationRuleGetByRegulationIdWithHttpMessagesAsync(regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates welcome regulation rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a welcome regulation rule.
            /// </param>
            public static ErrorResponse WelcomeRegulationRuleUpdate(this IRegulationAPI operations, WelcomeRegulationRuleModel model = default(WelcomeRegulationRuleModel))
            {
                return operations.WelcomeRegulationRuleUpdateAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates welcome regulation rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model that describe a welcome regulation rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> WelcomeRegulationRuleUpdateAsync(this IRegulationAPI operations, WelcomeRegulationRuleModel model = default(WelcomeRegulationRuleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WelcomeRegulationRuleUpdateWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the welcome regulation rule by specified regulation id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationRuleId'>
            /// The welcome regulation rule id.
            /// </param>
            public static ErrorResponse WelcomeRegulationRuleDelete(this IRegulationAPI operations, string regulationRuleId)
            {
                return operations.WelcomeRegulationRuleDeleteAsync(regulationRuleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the welcome regulation rule by specified regulation id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationRuleId'>
            /// The welcome regulation rule id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> WelcomeRegulationRuleDeleteAsync(this IRegulationAPI operations, string regulationRuleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WelcomeRegulationRuleDeleteWithHttpMessagesAsync(regulationRuleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
